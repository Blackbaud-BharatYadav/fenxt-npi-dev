<?xml version="1.0" encoding="UTF-8"?><Graph author="michaelphillips" created="Tue Mar 15 10:59:31 PDT 2016" guiVersion="3.4.4.P" id="1458080400496" licenseType="Commercial" modified="Wed Jul 19 17:08:38 EDT 2017" modifiedBy="alex.shchetkov" name="uat_gd" revision="1.346" showComponentDetails="true">
<Global>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="GD_dataset_constituents" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n\\|\r\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="constituentcategory" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentcongressionaldistrict" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentcountry" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentemail" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentfullname" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentfullname_constituentlastfirstname" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentgender" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentmaritalstatus" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentorigin" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentoriginrefid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentstate" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentstatehousedistrict" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="constituentstatesenatedistrict" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="donorstatus" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" format="yyyy-MM-dd HH:mm" name="constituentcreationdate" nullable="true" shift="0" size="0" type="date"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="GD_dataset_location" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n\\|\r\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="city" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="country" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="state" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="zip" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="GD_dataset_registrations" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n\\|\r\n" recordSize="-1" type="delimited">
<Field name="registrationid" type="string"/>
<Field eofAsDelimiter="false" name="teams__teamid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="teamraiserevent__teamraisereventid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="teamcaptainflag" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="selfdonorflag" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="returningregistration" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="registrationtype" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" length="12" name="registrationgoal" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" length="12" name="feepaid" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" length="12" name="extragift" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" format="yyyy-MM-dd HH:mm" name="date" nullable="true" shift="0" size="0" type="date"/>
<Field eofAsDelimiter="false" name="constituents__constituentid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="campaign__campaignid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" length="12" name="addonstotal" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field name="registrationcategory" type="string"/>
<Field name="centerid" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata8" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="GD_dataset_teamraisergift" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n\\|\r\n" recordSize="-1" type="delimited">
<Field name="giftid" type="string"/>
<Field eofAsDelimiter="false" name="companyid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="gifttype" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="paymenttype" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="transactionid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" length="12" name="amount" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" length="12" name="giftamount" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" length="12" name="reportgiftamount" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" format="yyyy-MM-dd HH:mm" name="date" nullable="true" shift="0" size="0" type="date"/>
<Field eofAsDelimiter="false" name="constituents__constituentid" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="teams__teamid" nullable="true" shift="0" size="0" type="string"/>
<Field name="team_raiser_eventid" type="string"/>
<Field name="gifttype_sort" type="long"/>
<Field name="centerid" type="string"/>
<Field name="self_donation" type="decimal"/>
<Field name="donation" type="decimal"/>
<Field name="fee" type="decimal"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="ID" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="id" type="string"/>
<Field name="bucket" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata11" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="log" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="entity" type="string"/>
<Field name="TS_FROM" type="string"/>
<Field name="TS_TO" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata6">
<Record fieldDelimiter="|" name="MAQL" recordDelimiter="\n" type="delimited">
<Field name="maql" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="maql_result" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="pid" type="string"/>
<Field name="maql" type="string"/>
<Field name="error" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata9" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="entity" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="type" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="ts" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata10" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="=" name="params" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="entity" type="string"/>
<Field name="ts" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="ReadTimeFrame" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="project_id" type="string"/>
<Field name="TS_FROM" type="string"/>
<Field name="TS_TO" type="string"/>
<Field name="TS_START" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata7" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="Statement" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="statement" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:gdc:datawarehouse://secure.gooddata.com/gdc/datawarehouse/instances/${ADS_INSTANCE}" id="JDBC0" jdbcSpecific="DSS" name="BBFE" password="${ADS_PASSWORD}" type="JDBC" user="${ADS_USER}"/>
<Property fileURL="delete_params.prm" id="GraphParameter14"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Dictionary>
<Entry contentType="contentType" id="DictionaryEntry0" input="true" name="TS_START" output="true" type="string"/>
</Dictionary>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="DataGenerator" guiX="39" guiY="-17" id="DATA_GENERATOR" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	if  (getParamValue('LOAD_MODE') == 'INCREMENTAL' or getParamValue('LOAD_MODE') == ('FULL_LOAD')) {}
	else { 
		raiseError("Unsupported LOAD_MODE: "+getParamValue('LOAD_MODE'));
		}
		

    printLog (info, '********** INCREMENT');
    printLog (info, '********** Load mode = ' + getParamValue('LOAD_MODE'));
	printLog (info, '********** Executing project_id = ' + getParamValue('TenantId'));

$out.0.statement = '';
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="true" fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata7" outPort="Port 0 (out)" toNode="TRASH:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" fileURL="${PROJECT}/delete_params.prm" guiName="CSV Reader" guiX="-6" guiY="68" id="CSV_READER" type="DATA_READER"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="DBExecute" guiX="722" guiY="80" id="DBEXECUTE2" printStatements="true" type="DB_EXECUTE" url="port:$0.statement:discrete"/>
<Node enabled="enabled" guiName="ExtSort" guiX="133" guiY="156" id="EXT_SORT" sortKey="entity(a)" type="EXT_SORT"/>
<Node enabled="enabled" guiName="Pivot" guiX="404" guiY="60" id="PIVOT" key="entity" nameField="type" type="PIVOT" valueField="ts"/>
<Node enabled="enabled" guiName="Reformat" guiX="270" guiY="115" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.entity=split($in.0.entity,'_TS_')[0];
$out.0.type=right($in.0.entity,2)=='TO'?'TS_TO':'TS_FROM';
$out.0.ts=$in.0.ts;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="586" guiY="136" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.statement = 
"insert into _sys_gd_load_info(project_id,ts_from, ts_to,event_ts,event_type,gdc_project_id, entity) values ("+
"'" + getParamValue('TenantId') + "'," +
"'" + $in.0.TS_FROM + "'," +
"'" + $in.0.TS_TO + "'," +
"now()," +
"'delete_start'," +
"'" +getParamValue('GDC_PROJECT_ID') + "',"+
"'" +$in.0.entity+"')";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Trash" guiX="661" guiY="-17" id="TRASH" type="TRASH"/>
<Edge debugMode="true" fromNode="CSV_READER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata10" outPort="Port 0 (output)" toNode="EXT_SORT:0"/>
<Edge debugMode="true" fromNode="EXT_SORT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata10" outPort="Port 0 (out)" toNode="REFORMAT:0"/>
<Edge debugMode="true" fromNode="PIVOT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata11" outPort="Port 0 (out)" toNode="REFORMAT1:0"/>
<Edge debugMode="true" fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata9" outPort="Port 0 (out)" toNode="PIVOT:0"/>
<Edge debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (input parameters)" metadata="Metadata7" outPort="Port 0 (out)" toNode="DBEXECUTE2:0"/>
</Phase>
<Phase number="10">
<Node enabled="enabled" guiName="Failure" guiX="763" guiY="290" id="FAILURE" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	raiseError( "-- Delete data from datasets - failed - PID:" + $in.0.pid + ", MAQL:" + $in.0.maql + ", error message:" + $in.0.error) ;

}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Join Keys" guiX="298" guiY="275" id="JOIN_KEYS" key="bucket" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[
//#CTL2
string[] sql_tmp;
string id = "";


function integer append() {
	id = $in.0.id;
	if ($in.0.id.in(sql_tmp)==false) ( append(sql_tmp,$in.0.id));
	return OK;
}


function integer transform() {
	$out.0.maql = 'DELETE FROM {attr.transactions_attr.transactionattrdistributionid} WHERE {label.transactions_attr.transactionattrdistributionid} in ( "'+ join('","', sql_tmp)+'");';
	clear(sql_tmp);
	return OK;
}


]]></attr>
</Node>
<Node enabled="enabled" guiName="Success" guiX="763" guiY="218" id="SUCCESS" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.* = $in.0.*;

printLog(info, "-- Successfull MAQL delete - PID:" + $in.0.pid + ", MAQL:" + $in.0.maql);
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="transaction_attr Delete Exec MAQL" guiX="459" guiY="275" id="TRANSACTION_ATTR_DELETE_EXEC_MAQL" maqlInputField="maql" type="MAQL_DML_EXECUTE"/>
<Node autoCommit="false" dbConnection="JDBC0" enabled="enabled" guiName="transaction_attr Keys to Delete" guiX="77" guiY="275" id="TRANSACTION_ATTR_KEYS_TO_DELETE" printStatements="true" type="DB_INPUT_TABLE" url="${GRAPH_DIR}/sql/dm_Transactions_attr_delete.sql"/>
<Node enabled="enabled" guiName="Trash" guiX="969" guiY="243" id="TRASH1" type="TRASH"/>
<Edge fromNode="FAILURE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 1 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="TRASH1:1"/>
<Edge debugMode="true" fromNode="JOIN_KEYS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (input)" metadata="Metadata6" outPort="Port 0 (out)" toNode="TRANSACTION_ATTR_DELETE_EXEC_MAQL:0"/>
<Edge fromNode="SUCCESS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="TRASH1:0"/>
<Edge fromNode="TRANSACTION_ATTR_DELETE_EXEC_MAQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (output - fields: project ID, MAQL statement, affected uris)" toNode="SUCCESS:0"/>
<Edge fromNode="TRANSACTION_ATTR_DELETE_EXEC_MAQL:1" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (errors - fields: project ID, MAQL statement, error details)" toNode="FAILURE:0"/>
<Edge debugMode="true" fromNode="TRANSACTION_ATTR_KEYS_TO_DELETE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="JOIN_KEYS:0"/>
</Phase>
<Phase number="30">
<Node enabled="enabled" guiName="Failure" guiX="763" guiY="436" id="FAILURE1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	raiseError( "-- Delete data from datasets - failed - PID:" + $in.0.pid + ", MAQL:" + $in.0.maql + ", error message:" + $in.0.error) ;

}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Join Keys" guiX="298" guiY="381" id="JOIN_KEYS1" key="bucket" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[
//#CTL2
string[] sql_tmp;
string id = "";


function integer append() {
	id = $in.0.id;
	if ($in.0.id.in(sql_tmp)==false) ( append(sql_tmp,$in.0.id));
	return OK;
}


function integer transform() {
	$out.0.maql = 'DELETE FROM {attr.transactions_fact.transactiondistributionid} WHERE {label.transactions_fact.transactiondistributionid} in ( "'+ join('","', sql_tmp)+'");';
	clear(sql_tmp);
	return OK;
}


]]></attr>
</Node>
<Node enabled="enabled" guiName="Success" guiX="763" guiY="364" id="SUCCESS1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.* = $in.0.*;

printLog(info, "-- Successfull MAQL delete - PID:" + $in.0.pid + ", MAQL:" + $in.0.maql);
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="transaction_fact Delete Exec MAQL" guiX="459" guiY="381" id="TRANSACTION_FACT_DELETE_EXEC_MAQL" maqlInputField="maql" type="MAQL_DML_EXECUTE"/>
<Node autoCommit="false" dbConnection="JDBC0" enabled="enabled" guiName="transaction_fact Keys to Delete" guiX="77" guiY="381" id="TRANSACTION_FACT_KEYS_TO_DELETE" printStatements="true" type="DB_INPUT_TABLE" url="${GRAPH_DIR}/sql/dm_Transactions_fact_delete.sql"/>
<Node enabled="enabled" guiName="Trash" guiX="980" guiY="378" id="TRASH2" type="TRASH"/>
<Edge fromNode="FAILURE1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 1 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="TRASH2:1"/>
<Edge debugMode="true" fromNode="JOIN_KEYS1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (input)" metadata="Metadata6" outPort="Port 0 (out)" toNode="TRANSACTION_FACT_DELETE_EXEC_MAQL:0"/>
<Edge fromNode="SUCCESS1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="TRASH2:0"/>
<Edge fromNode="TRANSACTION_FACT_DELETE_EXEC_MAQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge23" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (output - fields: project ID, MAQL statement, affected uris)" toNode="SUCCESS1:0"/>
<Edge fromNode="TRANSACTION_FACT_DELETE_EXEC_MAQL:1" guiBendpoints="" guiRouter="Manhattan" id="Edge24" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (errors - fields: project ID, MAQL statement, error details)" toNode="FAILURE1:0"/>
<Edge debugMode="true" fromNode="TRANSACTION_FACT_KEYS_TO_DELETE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="JOIN_KEYS1:0"/>
</Phase>
<Phase number="99">
<Node enabled="enabled" fileURL="${PROJECT}/delete_params.prm" guiName="CSV Reader" guiX="-6" guiY="660" id="CSV_READER1" type="DATA_READER"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="DBExecute" guiX="763" guiY="660" id="DBEXECUTE1" printStatements="true" type="DB_EXECUTE" url="port:$0.statement:discrete"/>
<Node enabled="enabled" guiName="ExtSort" guiX="143" guiY="660" id="EXT_SORT1" sortKey="entity(a)" type="EXT_SORT"/>
<Node enabled="enabled" guiName="Pivot" guiX="433" guiY="660" id="PIVOT1" key="entity" nameField="type" type="PIVOT" valueField="ts"/>
<Node enabled="enabled" guiName="Reformat" guiX="574" guiY="660" id="REFORMAT2" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.statement = 
"insert into _sys_gd_load_info(project_id,ts_from, ts_to,event_ts,event_type,gdc_project_id, entity) values ("+
"'" + getParamValue('TenantId') + "'," +
"'" + $in.0.TS_FROM + "'," +
"'" + $in.0.TS_TO + "'," +
"now()," +
"'delete_end'," +
"'" +getParamValue('GDC_PROJECT_ID') + "',"+
"'" +$in.0.entity+"')";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="284" guiY="660" id="REFORMAT3" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.entity =split($in.0.entity,'_TS_')[0];
$out.0.type=right($in.0.entity,2)=='TO'?'TS_TO':'TS_FROM';
$out.0.ts=$in.0.ts;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="true" fromNode="CSV_READER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata10" outPort="Port 0 (output)" toNode="EXT_SORT1:0"/>
<Edge debugMode="true" fromNode="EXT_SORT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata10" outPort="Port 0 (out)" toNode="REFORMAT3:0"/>
<Edge debugMode="true" fromNode="PIVOT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata11" outPort="Port 0 (out)" toNode="REFORMAT2:0"/>
<Edge debugMode="true" fromNode="REFORMAT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (input parameters)" metadata="Metadata7" outPort="Port 0 (out)" toNode="DBEXECUTE1:0"/>
<Edge debugMode="true" fromNode="REFORMAT3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 0 (in)" metadata="Metadata9" outPort="Port 0 (out)" toNode="PIVOT1:0"/>
</Phase>
</Graph>
